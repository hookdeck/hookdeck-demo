# Hookdeck CLI Demo Presentation Configuration
# This file defines the tmux-based presentation for the session-filters demo

metadata:
  name: "Hookdeck CLI Demo – Interactive Mode & Session Filters"
  duration: "2 minutes"
  tone: "Developer-to-developer"
  description: |
    Demonstrates how Hookdeck CLI's interactive mode and session filters
    help developers debug webhooks faster by filtering out noise and 
    providing clear visibility into events.

environment:
  variables:
    - name: HOOKDECK_URL
      required: true
      source: .env
      description: "Your Hookdeck endpoint URL"
  workingDirectory: ./
  checks:
    - command: "which tmux"
      errorMessage: "tmux is not installed. Please install it first."
    - command: "test -f .env"
      errorMessage: "Missing .env file with HOOKDECK_URL"

layout:
  sessionName: hookdeck-demo
  terminal:
    spawn: true
    title: "Hookdeck Demo - Presentation View"
    width: 1200
    height: 600
  controller:
    title: "Hookdeck Demo - Presenter View"
  panes:
    - id: sender
      title: "WEBHOOK SENDER"
      position: 0
      width: 33%
      initialCommand: "clear"
    - id: cli
      title: "HOOKDECK CLI"
      position: 1
      width: 34%
      defaultFocus: true
      initialCommand: "clear"
    - id: server
      title: "SERVER"
      position: 2
      width: 33%
      initialCommand: "clear"

steps:
  # Title Scene
  - id: title
    title: "Title Screen"
    duration: "5s"
    speakerNotes: |
      # Title (5s)
      
      When you're testing webhooks locally, it can be hard to debug what's happening.
      Events from teammates and other systems create noise, and inspecting or replaying specific events is tedious.
      That's why the Hookdeck CLI now includes session filters to cut through the noise, and interactive mode to make it easy to inspect and replay the events you care about directly from your terminal.
    actions:
      - type: prompt
        message: "Hookdeck CLI Demo - Press ENTER to begin..."

  # Scene 1: Setup and show the noise (40s)
  - id: scene1_setup
    title: "Scene 1 - Setup Server"
    duration: "40s"
    speakerNotes: |
      Let's begin by running a simple local server that just logs each webhook it receives.
    actions:
      - type: command
        pane: server
        command: "npm run server"
        wait: true
        prompt: "Scene 1 - Setup and show the noise (40s)\nStarting the server..."
        typeSpeed: 50
      - type: pause
        duration: 2000

  - id: scene1_listen
    title: "Start Hookdeck Listen"
    speakerNotes: |
      Now, let's run the Hookdeck CLI `listen` command. The new Interactive mode is on by default, so you'll see a live terminal view of incoming events as you did in previous versions. We'll go into the interactive part shortly.
    actions:
      - type: command
        pane: cli
        command: "hookdeck listen 3000 github --path /webhooks/github"
        wait: true
        prompt: "Starting hookdeck listen (without filters)..."
        typeSpeed: 30
      - type: pause
        duration: 3000

  - id: scene1_noise
    title: "Trigger Webhook Noise"
    speakerNotes: |
      In another terminal, I'll trigger a burst of GitHub-style webhooks to simulate a noisy shared environment.

      Action: Start npm run webhooks command
      
      Here's the problem — lots of webhooks of various event types hitting your endpoint all at once. But you may only care about one or two of those event types.
    actions:
      - type: command
        pane: sender
        command: "npm run webhooks -- --url ${HOOKDECK_URL} --verbose --loops 2"
        wait: true
        prompt: "Triggering webhook noise (2 loops)...\nThis will send multiple event types."
        typeSpeed: 30
      - type: prompt
        message: |
          Scene 1 complete.
          Notice all the different event types coming through.

  # Scene 2: Apply session filters (35s)
  - id: scene2_stop_cli
    title: "Scene 2 - Stop CLI"
    duration: "35s"
    speakerNotes: |
      # Scene 2 – Apply session filters (35s)
      
      Session filters let you narrow that stream to only the events you care about while this session is active.
      The filtering happens in the Hookdeck Event Gateway before the events are delivered to you.
    actions:
      - type: signal
        pane: cli
        signal: "C-c"
        wait: true
        prompt: "Scene 2 - Apply session filters (35s)\nStopping hookdeck listen..."
      - type: pause
        duration: 1000

  - id: scene2_restart_filtered
    title: "Restart with Session Filter"
    speakerNotes: |
      Now, I'll restart `hookdeck listen`, this time adding a session filter to only allow `pull_request` events through.


      You'll see the filter is applied on the x-github-event header looking for a value of "pull_request"
    actions:
      - type: command
        pane: cli
        command: "hookdeck listen 3000 github --path /webhooks/github --filter-headers '{\"x-github-event\":\"pull_request\"}'"
        wait: true
        prompt: "Restarting hookdeck listen WITH session filter...\nFiltering for pull_request events only."
        typeSpeed: 30
      - type: pause
        duration: 3000

  - id: scene2_filtered_test
    title: "Test Filtered Webhooks"
    speakerNotes: |
      Action: Start npm run webhooks command
      
      Now I'll trigger the same webhook sequence again.
      
      This time only the 3 pull-request events make it through.
      Once you stop `listen`, the filters disappear — the filters aren't persisted in the Hookdeck Event Gateway.
    actions:
      - type: command
        pane: sender
        command: "npm run webhooks -- --url ${HOOKDECK_URL} --verbose --loops 1"
        wait: true
        prompt: "Triggering webhooks again (1 loop)...\nOnly pull_request events should come through."
        typeSpeed: 30
      - type: prompt
        message: |
          As required, only the pull_request events reach the Hookdeck CLI and, most importantly, your local server.

  # Scene 3: Interactive Mode (30s)
  - id: scene3_interactive
    title: "Scene 3 - Interactive Mode"
    duration: "30s"
    speakerNotes: |
      Now, let's explore Interactive mode in more detail.
      
      Interactive mode gives you an easier way to inspect and replay events.

      I can scroll through the list of received events using the arrow keys.

      I can press `d` to view the details of a specific event, including headers and request and response payloads.

      I can press `r` to replay the event directly from the terminal.

      And I can also press `o` to open the event in the Hookdeck Dashboard for even more detailed inspection and debugging.
    actions:
      - type: focus
        pane: cli
      - type: prompt
        message: |
          Action: Demo scrolling, inspecting, replaying events, and opening the event in the Hookdeck Dashboard.

  # Scene 4: Wrap-up (10-15s)
  - id: scene4_wrapup
    title: "Scene 4 - Wrap-up"
    duration: "10-15s"
    speakerNotes: |
      And that's it!
      
      Session filters keep your local testing focused.

      Interactive mode gives you clear visibility into every event, and the ability to inspect and replay them directly from your terminal.
      Update to the v1.1.0 of the Hookdeck CLI try out these new features.
    actions:
      - type: prompt
        message: |
          Demo complete!

# Navigation shortcuts
navigation:
  shortcuts:
    - key: "n"
      action: "next"
      description: "Next step"
    - key: "p"
      action: "previous"
      description: "Previous step"
    - key: "r"
      action: "restart"
      description: "Restart presentation"
    - key: "g"
      action: "goto"
      description: "Go to specific step"
    - key: "q"
      action: "quit"
      description: "Quit presentation"
  
  autoAdvance:
    enabled: false
    defaultDelay: 1000

# Presentation settings
settings:
  showProgress: true
  showStepNumbers: true
  showDuration: true
  confirmBeforeQuit: true
  logCommands: true
  recordSession: false